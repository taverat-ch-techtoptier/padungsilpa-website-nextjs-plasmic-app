// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qoVKgVQ2sZgJYceYTt4HBN
// Component: qZw1WdosKhVJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsnObOIahJqV6L } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nObOIahJqV6L/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qoVKgVQ2sZgJYceYTt4HBN/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: qZw1WdosKhVJ/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: BTQ5d-_d3Bcp/icon

createPlasmicElementProxy;

export type PlasmicProductRow__VariantMembers = {};
export type PlasmicProductRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductRow__VariantsArgs;
export const PlasmicProductRow__VariantProps = new Array<VariantPropType>();

export type PlasmicProductRow__ArgsType = {};
type ArgPropType = keyof PlasmicProductRow__ArgsType;
export const PlasmicProductRow__ArgProps = new Array<ArgPropType>();

export type PlasmicProductRow__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultProductRowProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductRow__RenderFunc(props: {
  variants: PlasmicProductRow__VariantsArgs;
  args: PlasmicProductRow__ArgsType;
  overrides: PlasmicProductRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnObOIahJqV6L()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__wlmxa)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___7NeJ)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/padungsilpa_website/images/plant1FeaturedJpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox___9AHge)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__g3W7)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___87GtJ)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__mzWT
            )}
            component={Link}
            platform={"nextjs"}
          >
            <Trans__>{"Nulla suscipit "}</Trans__>
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dfVdu
            )}
          >
            <Trans__>{"bigplants "}</Trans__>
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__u2QvX
            )}
          >
            <Trans__>{"$49.40 "}</Trans__>
          </h5>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__lxk6N)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__ijF3G)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/padungsilpa_website/images/plant2FeaturedJpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__i285S)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__t4Iq5)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__hyIlm)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__fN1Wj
            )}
            component={Link}
            platform={"nextjs"}
          >
            <Trans__>{"Integer porta"}</Trans__>
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pkPs3
            )}
          >
            <Trans__>{"cactuses"}</Trans__>
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5___70QZq
            )}
          >
            <Trans__>{"$99.00 "}</Trans__>
          </h5>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__f3JW9)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__anNr)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/padungsilpa_website/images/plant5FeaturedJpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__mo1VY)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__wbTrw)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__jjFya)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__urkAh
            )}
            component={Link}
            platform={"nextjs"}
          >
            <Trans__>{"Vestibulum eget"}</Trans__>
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a3JZo
            )}
          >
            <Trans__>{"bigplants "}</Trans__>
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__iYdVg
            )}
          >
            <Trans__>{"$220.00 "}</Trans__>
          </h5>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__qJghe)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__uuNQ)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/padungsilpa_website/images/plant9FeaturedJpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__qxz7)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg___1I0YT)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__iy3Ga)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__sBr4J
            )}
            component={Link}
            platform={"nextjs"}
          >
            <Trans__>{"Fusce sagittis"}</Trans__>
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yz08V
            )}
          >
            <Trans__>{"cactuses"}</Trans__>
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__toj4S
            )}
          >
            <Trans__>{"$400.40 "}</Trans__>
          </h5>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductRow__VariantsArgs;
    args?: PlasmicProductRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductRow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
